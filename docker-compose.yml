version: "3.8"

services:
  # RabbitMQ - Message Broker cho Celery
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_ERLANG_COOKIE: "mycookie"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Redis - dùng chung cho tất cả các service
  redis:
    image: "redis:latest"
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # PostgreSQL - Database của UserService
  user-db:
    image: postgres:latest
    container_name: user-db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_USER_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # User Service
  user-service:
    build: ./backend/UserService
    container_name: user-service
    restart: always
    volumes:
      - ./backend/UserService:/UserService
    env_file:
      - .env
    ports:
      - "8001:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      user-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network

  # MongoDB - Database của ProductService
  product-mongodb:
    image: mongo:latest
    container_name: product-mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_product_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Product Service
  product-service:
    build: ./backend/ProductService
    container_name: product-service
    restart: always
    volumes:
      - ./backend/ProductService:/ProductService
    env_file:
      - .env
    ports:
      - "8002:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      product-mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network

  # PostgreSQL - Database của InventoryService
  inventory-db:
    image: postgres:latest
    container_name: inventory-db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_INVENTORY_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - postgres_inventory_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Inventory Service
  inventory-service:
    build: ./backend/InventoryService
    container_name: inventory-service
    restart: always
    volumes:
      - ./backend/InventoryService:/InventoryService
    env_file:
      - .env
    ports:
      - "8003:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      inventory-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network

  # MongoDB - Database của HistoryService
  history-mongo-db:
    image: mongo:latest
    container_name: history-mongo-db
    restart: always
    ports:
      - "27018:27017"
    volumes:
      - mongodb_history_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: history_logs_db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network


  # History Service
  history-service:
    build: ./backend/HistoryService
    container_name: history-service
    restart: always
    volumes:
      - ./backend/HistoryService:/HistoryService
    env_file:
      - .env
    ports:
      - "8100:8000"
    depends_on:
      history-mongo-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_user_data:
  postgres_inventory_data:
  mongodb_product_data:
  mongodb_history_data:
